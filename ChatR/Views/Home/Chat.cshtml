<!--[if gte IE 9]>
  <style type="text/css">
    .gradient {
       filter: none;
    }
  </style>
<![endif]-->

<style>
    body {
        background-image: url('../../Content/images/wrapper.png');
        background-repeat: repeat-x;
    }
</style>

@if (false)
{
    <script src="../../Scripts/jquery-1.7.2-vsdoc.js" type="text/javascript"></script>
}

<div id="header" class="gradient">
    <h2 style="color: whitesmoke">Explain.Me</h2>
</div>


    <div id="myContainer" class="container-fluid">
    <div id="user-room-info" class="alert alert-info">
        <h3>Hello "<strong><p style="display: inherit" data-bind="text: username"></p></strong>!" You are in "<strong><p style="display: inherit" data-bind="text: roomname"></p></strong>" room.</h3>
    </div>
   
    <div class="row-fluid">
        <!-- This  is the contact box -->
        <div id="users-list" class="span2">
            <h4>Users</h4>
            <ul data-bind="foreach: contacts">
                <li class="user-box"><span class="user-box-name" data-bind="text: username"></span></li>
            </ul>
        </div>
        <!-- This  is the chat box -->
        <div id="chat-list" class="span4" data-bind="foreach: messages">
            <ul>
                <li>
                    <div class="chat-listitem-username" data-bind="text: username"></div>
                    <div class="chat-listitem-message"  data-bind="html: content"></div>
                    <div class="chat-listitem-timestamp" data-bind="text: timestamp.toLocaleTimeString()"></div>
                </li>
            </ul>
        </div>
        <!-- This is the board box -->
        <canvas id="board-canvas2"></canvas>
    </div>
    <!-- This is the message box -->
    <div id="compose" class="row-fluid">
        <div class="span2"></div>
        <div class="span4">
            <div class="row-fluid">
                <div class="span10"><textarea id="compose-box" rows="2" cols="50" placeholder="Type your message here"></textarea></div>
                <div class="span2"><button id="send-btn" type="submit" class="btn btn-large btn-primary">Send</button></div>
            </div>
        </div>
    </div>
</div>



<!--
This script reference is important because navigating to /signalr/hubs will automatically generate the script.
This should be done via an HttpModule automatically generated by SignalR on the server side
https://github.com/SignalR/SignalR/wiki/SignalR-JS-Client-Hubs
If you navigate to signalr/hubs in your browser, you'll see a script that is dynamically generated based on the hubs declared
on the server. Each hub on the server will become a property on the client side $.connection, e.g. $.connection.myHub.
 -->
<script type="text/javascript" src="@Url.Content("/signalr/hubs")"></script>
<script type="text/javascript" src="@Url.Content("~/Js/chatR.js")"></script>
<script type="text/javascript">


    // IE doesn't parse IS8601 formatted dates, so I had to find this function to parse it
    // (URL http://dansnetwork.com/javascript-iso8601rfc3339-date-parser/ )
    Date.prototype.setISO8601 = function (dString) {

        var regexp = /(\d\d\d\d)(-)?(\d\d)(-)?(\d\d)(T)?(\d\d)(:)?(\d\d)(:)?(\d\d)(\.\d+)?(Z|([+-])(\d\d)(:)?(\d\d))/;

        if (dString.toString().match(new RegExp(regexp))) {
            var d = dString.match(new RegExp(regexp));
            var offset = 0;

            this.setUTCDate(1);
            this.setUTCFullYear(parseInt(d[1], 10));
            this.setUTCMonth(parseInt(d[3], 10) - 1);
            this.setUTCDate(parseInt(d[5], 10));
            this.setUTCHours(parseInt(d[7], 10));
            this.setUTCMinutes(parseInt(d[9], 10));
            this.setUTCSeconds(parseInt(d[11], 10));
            if (d[12])
                this.setUTCMilliseconds(parseFloat(d[12]) * 1000);
            else
                this.setUTCMilliseconds(0);
            if (d[13] != 'Z') {
                offset = (d[15] * 60) + parseInt(d[17], 10);
                offset *= ((d[14] == '-') ? -1 : 1);
                this.setTime(this.getTime() - offset * 60 * 1000);
            }
        }
        else {
            this.setTime(Date.parse(dString));
        }
        return this;
    };

    $(document).ready(function () {

        // Model instances
        var currentUserRoom = new chatR.userRoom(@Html.Raw(Json.Encode(Model))); // temp variable
        var currentUser = new chatR.user(currentUserRoom.username, currentUserRoom.id); // The username chose by the user is stored in the model
       

        // Proxy creation
        var chatHub = $.connection.chatHub; // chatHub is the name of the Hub as declared in server side code
        chatHub.state.username = currentUser.username; // This is the round-trip state
        chatHub.state.roomname = currentUserRoom.roomname; // This is the round-trip state


        // viewModels instances
        var chat = new chatR.chatViewModel();
        var userRoom = new chatR.userRoomViewModel(currentUserRoom.username, currentUserRoom.roomname);
        var users = new chatR.connectedUsersViewModel();
       
        // Client-side event handlers, as declared inside the  Hub
        chatHub.client.onMessageReceived = function (message) {
            var date = new Date();
            date.setISO8601(message.Timestamp);
            chat.messages.push(new chatR.chatMessage(message.Username, message.Content, date)); //new Date(message.Timestamp)));
            $("#chat-list").scrollTo('max');
        };

        chatHub.client.leaves = function (userId, username, timestamp) {
            var disconnectedUser = new chatR.user(username, userId);
            users.customRemove(disconnectedUser);
        };

        chatHub.client.joins = function (userId, username, timestamp) {
            var connectedUser = new chatR.user(username, userId);
            users.contacts.push(connectedUser);
        };

        function sendMessageContent() {
            var content = $("#compose-box").val();
            if (content != "" && content != null) {
                var msg = new chatR.chatMessage(currentUser.username, content);
                chatHub.server.send(msg).done(function () {
                    $("#compose-box").val("");
                }).fail(function (e) {
                    alert("Could not connect to server");
                });
            }
        }

        $("#send-btn").click(function () {
            sendMessageContent();
        });

        // Handles Enter keystroke press event
        $('#compose-box').keypress(function (e) {
            if (e.which == 13) {
                sendMessageContent();
            }
        });

        ko.applyBindings(users, $("#users-list")[0]);
        ko.applyBindings(chat, $("#chat-list")[0]);
        ko.applyBindings(userRoom, $("#user-room-info")[0]);
        

        // Step 1: Start the connection
        // Step 2: Get all currenlty connected users
        // Step 3: Join to the chat and nmotify all the clients (me included) that there is a new user connected
        $.connection.hub.start()
                    .done(function () {
                        chatHub.server.getConnectedUsers(currentUserRoom.roomname)
                                    .done(function (connectedUsers) {
                                        ko.utils.arrayForEach(connectedUsers, function (item) {
                                            users.contacts.push(new chatR.user(item.Username, item.Id));
                                        });
                                    }).done(function () {
                                        chatHub.server.joined();
                                    });
                    });

        

        // BOARD
        var canvas = $("#board-canvas2");
        var ctx = canvas[0].getContext("2d");
        document.getElementById('board-canvas2').setAttribute('width', 600);
        document.getElementById('board-canvas2').setAttribute('height', 600);



        var color = "black";
        var pressed = false;
        var position;

        function positionWithE(e) {
            var o = $(canvas).offset();
            return { x: e.clientX - o.left, y: e.clientY - o.top };
        }

        canvas
            .mousedown(function (e) {
                var p = positionWithE(e);
                pressed = true;
                position = p;

                console.log("mine-down: " + p.x + ", " + p.y);

                chatHub.server.broadcastPoint(p.x, p.y);
            })
            .mouseup(function () {
                pressed = false;
            })
            .mouseout(function () {
                pressed = false;
            })
            .mousemove(function (e) {
                var p = positionWithE(e);
                if (pressed) {
                    ctx.moveTo(position.x, position.y);
                    ctx.lineTo(p.x, p.y);
                    ctx.stroke();
                    console.log("mine-move: " + p.x + ", " + p.y);
                    chatHub.server.broadcastLine(position.x, position.y, p.x, p.y);

                    position = p;
                }
            });

        function setPoint(x, y, color) {
            console.log("theirs-down: " + x + ", " + y);
            ctx.fillStyle = color;
            ctx.beginPath();
            ctx.arc(x, y, 1, 0, Math.PI * 2);
            ctx.fill();
        }
        function drawLine(x0, y0, x1, y1, color) {
            /*ctx.beginPath();
            ctx.moveTo(x0, y0);
            ctx.lineTo(x1, y1);
            ctx.strokeStyle = color;
            ctx.lineWidth = 1;
            ctx.stroke();
            ctx.closePath();*/
            console.log("theirs-move: " + x1 + ", " + y1);
            ctx.moveTo(x0, y0);
            ctx.lineTo(x1, y1);
            ctx.stroke();

        }
        function clearPoints() {
            ctx.clearRect(0, 0, canvas.width(), canvas.height());
        }

        $("#clear").click(function () {
            chatHub.server.broadcastClear();
        });

        chatHub.client.clear = function () {
            clearPoints();
        };
        chatHub.client.drawPoint = function (x, y) {
            setPoint(x, y, "black");
        };
        chatHub.client.drawLine = function (x0, y0, x1, y1) {
            drawLine(x0, y0, x1, y1, "black");
        };
    });

</script>
